<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Previewify" script:language="StarBasic" script:moduleType="normal">REM  *****	BASIC  *****

Function openFile (path)
	openFile = StarDesktop.loadComponentFromURL(ConvertToURL(path), &quot;_blank&quot;, 0, Array())
End Function

Function forceSaveFile (document, path)
	Dim options(0) as new com.sun.star.beans.PropertyValue
	options(0).Name = &quot;Overwrite&quot; 
	options(0).Value = True
	document.storeToURL(ConvertToUrl(path), options)
End Function

Function totallyClear (range)
	range.clearContents(com.sun.star.sheet.CellFlags.VALUE + _
			com.sun.star.sheet.CellFlags.DATETIME + _
			com.sun.star.sheet.CellFlags.STRING + _
			com.sun.star.sheet.CellFlags.ANNOTATION + _
			com.sun.star.sheet.CellFlags.FORMULA + _
			com.sun.star.sheet.CellFlags.HARDATTR + _
			com.sun.star.sheet.CellFlags.STYLES + _
			com.sun.star.sheet.CellFlags.OBJECTS + _
			com.sun.star.sheet.CellFlags.EDITATTR)
End Function

Function getUsedArea (sheet)
	cursor = sheet.createCursor()
	cursor.goToStartOfUsedArea(false)
	cursor.goToEndOfUsedArea(true)
	getUsedArea = cursor.getRangeAddress()
End Function

Function getLastCell (sheet)
	usedArea = getUsedArea(sheet)
	getLastCell = sheet.getCellByPosition(usedArea.EndColumn, usedArea.EndRow)
End Function

Function getUsedAreaDimensions (sheet)
	Dim dimensions As New Collection
	lastCell = getLastCell(sheet)
	width = lastCell.Position.X + lastCell.Size.Width
	height = lastCell.Position.Y + lastCell.Size.Height
	dimensions.add(width, &quot;width&quot;)
	dimensions.add(height, &quot;height&quot;)
	getUsedAreaDimensions = dimensions
End Function

Function optimizeCellDimensions (sheet)
	sheet.Columns.OptimalWidth = True
	sheet.Rows.OptimalHeight = True
End Function

Function hasCells (sheet)
	lastCell = getLastCell(sheet)
	hasCells = lastCell.CellAddress.Row &gt; 0 Or lastCell.CellAddress.Column &gt; 0
End Function

Function dropLastRow (sheet)
	totallyClear(sheet.Rows.getByIndex(getLastCell(sheet).CellAddress.Row))
End Function

Function dropLastColumn (sheet)
	totallyClear(sheet.Columns.getByIndex(getLastCell(sheet).CellAddress.Column))
End Function

REM TODO: compare current size with desired size and take a sample cell size
REM and then drop a bunch of rows/columns at once for efficiency.
REM Otherwise, processing a huge spreadsheet could be critically strenuos
Function cropSheetToSize (sheet, maxWidth, maxHeight, optimize)
	If optimize Then
		optimizeCellDimensions(sheet)
	End If
	dimensions = getUsedAreaDimensions(sheet)
	tableIsTooWide = maxWidth And dimensions(&quot;width&quot;) &gt; maxWidth
	tableIsTooTall = maxHeight And dimensions(&quot;height&quot;) &gt; maxHeight
	While (hasCells(sheet) And (tableIsTooWide Or tableIsTooTall))
		If tableIsTooTall Then
			dropLastRow(sheet)
			If optimize Then
				optimizeCellDimensions(sheet)
			End If
			dimensions = getUsedAreaDimensions(sheet)
			tableIsTooWide = maxWidth And dimensions(&quot;width&quot;) &gt; maxWidth
			tableIsTooTall = maxHeight And dimensions(&quot;height&quot;) &gt; maxHeight
		End If
		If tableIsTooWide Then
			dropLastColumn(sheet)
			If optimize Then
				optimizeCellDimensions(sheet)
			End If
			dimensions = getUsedAreaDimensions(sheet)
			tableIsTooWide = maxWidth And dimensions(&quot;width&quot;) &gt; maxWidth
			tableIsTooTall = maxHeight And dimensions(&quot;height&quot;) &gt; maxHeight
		End If
	Wend
End Function

Function preparePreviewForSpreadsheet (document, maxWidth, maxHeight, optimize)
	sheet = document.getCurrentController().getActivesheet()

	cropSheetToSize(sheet, maxWidth, maxHeight, optimize)

	pageStyle = document.StyleFamilies.getByName(&quot;PageStyles&quot;).getByName(sheet.PageStyle)

	REM remove whitespace around table
	pageStyle.TopMargin = 0
	pageStyle.RightMargin = 0
	pageStyle.LeftMargin = 0
	pageStyle.BottomMargin = 0

	REM make page same size as table
	dimensions = getUsedAreaDimensions(sheet)
	pageStyle.Width = dimensions(&quot;width&quot;)
	pageStyle.Height = dimensions(&quot;height&quot;)
	
	REM do not paginate table
	pageStyle.ScaleToPages = 1
End Function

Function preparePreview (Optional document, Optional maxWidth, Optional maxHeight, Optional optimize)
	If isMissing(document) Then
		document = ThisComponent
	End If
	If isMissing(maxWidth) Then
		maxWidth = False
	End If
	If isMissing(maxHeight) Then
		maxHeight = False
	End If
	If isMissing(optimize) Then
		optimize = False
	End If
	
	If document.SupportsService(&quot;com.sun.star.sheet.SpreadsheetDocument&quot;) Then
		preparePreviewForSpreadsheet(document, maxWidth, maxHeight, optimize)
	End If
End Function

Function preparePreviewForFile (inputFilePath, outputFilePath, Optional maxWidth, Optional maxHeight, Optional optimize)
	document = openFile(inputFilePath)
	preparePreview(document, maxWidth, maxHeight, optimize)
	forceSaveFile(document, outputFilePath)
	document.close(False)
End Function
</script:module>
